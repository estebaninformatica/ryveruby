Ryveruby::Sender.call(team_code: "",text: "")[:errors].first[:status]
Ryveruby::Sender.call(team_code: "",text: "")[:errors].first
Ryveruby::Sender.call(team_code: "",text: "")[:errors]
Ryveruby::Sender.call(team_code: "",text: "")[:errors][:status]
Ryveruby::Sender.call(team_code: "",text: "")[:errors]
Ryveruby::Sender.call(team_code: "",text: "").to_json
Ryveruby::Sender.call(team_code: "",text: "")
Ryveruby::Sender.call(team_code: "",text: "").class
Ryveruby::Sender.call(team_code: "",text: "")
Ryveruby::Sender.new(team_code: "",text: "")
c
nil.to_s
nil.empty?
"".empty?
"".blank?
"".nil?
"".nil
c
Ryveruby::MessageSender.call(team_code: "asdasd")
exit
Ryveruby::MessageSender.call(team_code: "asdasd")
exit
Ryveruby::MessageSender.call(team_code: "asdasd",text: "aca")
exit
Ryveruby::MessageSender.call(team_code: "asdasd",text: "aca")
reload!
Ryveruby::MessageSender.call(team_code: "asdasd",text: "aca")
exit
Ryveruby::MessageSender.call(team_code: "asdasd",text: "aca")
exit
Ryveruby::MessageSender.call(team_code: "asdasd",text: "aca")
exit
Ryveruby::MessageSender.call(team_code: "asdasd",text: "aca")
reload!
Ryveruby::MessageSender.call(team_code: "asdasd",text: "aca")
Ryveruby::MessageSender.call(team_code: "asdasd")
exit
Ryveruby::MessageSender.call(team_code: "asdasd")
c
Ryveruby::MessageSender.call(team_code: "asdasd")
Ryveruby::MessageSender.call(pepe)
Ryveruby::MessageSender.call()
Ryveruby::Sender.call
require_relative 's3ckup/backup'
require_relative 's3ckup/manifest'
require 'rubygems'
Ryveruby::Sender.call
Ryveruby::Sender
RyverubySender
reload!
RyverubySender
Ryveruby::Sender
Ryveruby::MessageSender
Ryveruby::
Ryveruby.class
Ryveruby
class
MessageSender.class
Ryveruby::MessageSender.call
